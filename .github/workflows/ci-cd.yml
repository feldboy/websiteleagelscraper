name: CI/CD Pipeline

on:
  push:
    branches: [ dev, test, pp, main ]
  pull_request:
    branches: [ dev, test, pp, main ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: legaldb_test
          POSTGRES_USER: legaltest
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy src/ --ignore-missing-imports

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql+asyncpg://legaltest:testpass@localhost:5432/legaldb_test
        REDIS_URL: redis://localhost:6379
      run: |
        cp .env.test .env
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  deploy-dev:
    name: Deploy to Development
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: dev
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway (Dev)
      uses: railwayapp/cli@v3
      with:
        command: up --service ${{ secrets.RAILWAY_SERVICE_DEV }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-test:
    name: Deploy to Testing
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' && github.event_name == 'push'
    environment: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway (Test)
      uses: railwayapp/cli@v3
      with:
        command: up --service ${{ secrets.RAILWAY_SERVICE_TEST }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-pp:
    name: Deploy to Pre-Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/pp' && github.event_name == 'push'
    environment: pp
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway (Pre-Prod)
      uses: railwayapp/cli@v3
      with:
        command: up --service ${{ secrets.RAILWAY_SERVICE_PP }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  deploy-prod:
    name: Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Railway (Production)
      uses: railwayapp/cli@v3
      with:
        command: up --service ${{ secrets.RAILWAY_SERVICE_PROD }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}